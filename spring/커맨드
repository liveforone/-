<h1>커맨드 객체</h1>

<h2>익숙함 속에 잊어버린 커맨드 객체</h2>
<pre>
    커맨드 객체란 무엇일까?
    뷰에서 값을 가져올때 폼객체 안의 input태그 혹은 textarea에 
    name="dto 필드의 객체이름"으로 매핑된 객체를 
    dto에 담아서 가져오는것이다. 
    간단하고 너무나 익숙해서 큰 공부없이 커맨드객체를 사용하고 있었다.
</pre>

<h2>httpseveltrequest란??</h2>
<pre>
    커맨드 객체를 이해하려면 이 친구에 대해 짚고 넘어가야한다.
    폼데이터의 http의 요청을 url파라미터(쿼리스트링)에 key-value 형식으로 담고서 
    1대1방식으로 값을 가져오는 친구이다.
    이전에는 이 친구를 사용해 사용자의 입력을 많이 가져왔었다.
    하지만 한계가 느껴지지 않는가? 
    바로 1대1 방식이다.
</pre>

<h2>그렇다면 커맨드 객체는?</h2>
<pre>
    커맨드 객체를 간단히 정의하면
    1. dto를 일반적으로 의미한다.
    2. setter가 있어야한다.
    3. httpseveltrequest가 가져오는 http 요청의 key와 동일한 name의 필드가 정의되어있어야한다.
    4. 요청을 한 번에 모두 받는다(1대1 방식이 아니다).
</pre>

<h2>저질렀던 오류</h2>
<pre>
    이전에 빌더패턴을 처음 사용하게 되면서 엔티티와 dto에 모두 빌더 패턴을 적용했었다.
    엔티티에 적용한것은 좋았지만 dto에는 기존에 사용하던 @Data 어노테이션을 제거하고
    빌더패턴을 적용했었다. 그리고 기존에 커맨드 객체를 사용해서 값을 가져오던 방식을 그대로 사용했다.
    dto에 setter가 없다보니 커맨드 객체가 값을 전혀 가져오지 못했다...
</pre>

<h2>결국에 자바빈 패턴을 dto까지 완벽하게 벗어나지 못하는구나..</h2>
<pre>
    위의 내가 저질렀던 오류에서도 볼 수 있듯이 엔티티는 빌더패턴(이나 다른 디자인 패턴)
    을 적용해서 자바빈 패턴에서 벗어날 수 있었다.
    하지만 dto는 커맨트 객체를 사용해 폼데이터를 한번에 가져오기 위해서는 setter를 버릴 수 없다.
    즉 자바빈 패턴에서 벗어날 수 없다....
    하지만 무조건 setter를 안쓰기보단, 어쩔수없이 사용해야하는 경우나 dto의 경우에는
    사용하더라도 괜찮을것 같다는 생각이 든다.(그래도 엔티티만큼은 꼭 일관성을 유지하자!!)
    dto는 값이 수시로 변경되고 엔티티로 값을 넘겨주기 위한 객체이니깐!!
</pre>
