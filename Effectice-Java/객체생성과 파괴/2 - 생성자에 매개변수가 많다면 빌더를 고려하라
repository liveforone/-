# 생성자에 매개변수가 많다면 빌더를 고려하라
> 일반적으로 나는 빌더패턴을 상당히 선호한다. 빌더패턴은 유연하고 lombok의 어노테이션덕에 깔끔한 성격까지 지니기에 나는 상당히 선호하는 편이다. 개인적으로 엔티티의 불변과 일관성을 지키는 방식을 상당히 선호하기에 자바빈즈 패턴으로 입문했던 나는 이러한 방식을 고치고 싶었다. 그렇다면 이렇게 장점을 늘어놓는 빌더패턴을 자바빈즈와 점층적 생성자 패턴과 비교하며 살펴보자

## 정적팩토리와 생성자의 한계
* 정적팩토리와 생성자는 같은 한계를 지닌다.
* 그것은 선택적 매개변수가 많을때 대응하기 어럽다는 것이다. 
* 이러한 점 때문에 이전에 개발자들은 점층적 생성자 패턴으로 이 문제를 해결했었다.

## 점층적 생성자 패턴
* 점층적 생성자 패턴은 필수 매개변수만 받는 생성자
* 필수 매개변수에 선택 매개변수 1개를 받는 생성자
* 필수 매개변수에 선택 매개변수 2개..3개.. 이런식의 방식이다.
* 당연하게도 매개변수가 많아지면 클라이언트 코드를 작성하거나 읽기가 어려운 단점을 가지게 된다.
* 각 값의 의미가 무엇인지 헷갈리고, 매개변수가 몇 개인지 주의해서 살펴보아야하는 등 여러 단점이 있다.

## 자바 빈즈 패턴
* 스프링을 입문할때 가장 많이 쓰는 패턴일 것이다.
* 간단하고 복잡하지도 않다. 또한 lombok을 쓴다면 편리하게 선언할 수 있다.
* setter를 사용하는 그 코드가 바로 자바 빈즈 패턴이다.
* 자바 빈즈 패턴은 심각한 문제를 가지고 있는데, 객체 하나를 만들기 위해 메소드 여러개를 호출해야한다.
* 또 객체가 완전히 만들어지기 전까지 <u>일관성이 무너진상태에 놓이게된다.</u>
* 이러한 일관성이 무너지는 단점때문에 클래스의 불변이 깨져버리게된다.

## 빌더 패턴
* 점층적 생성자의 안전성과 자바빈즈 패턴의 가독성을 겸비한 것이 바로 빌더 패턴이다.
* 클라이언트는 필요한 객체를 만드는 대신 생성자를 호출해서 빌더 객체를 얻는다.
* 빌더 객체가 제공하는 일종의 setter메서드로 원하는 선택 매개변수를 설정한다.
* 마지막으로 매개변수가 없는 build 메소드를 호출해서 필요한(일반적으로 불변인) 객체를 얻는다.

## 빌더 패턴 예제 코드
<code>
public class NutritionFacts {
    private final int servingSize;
    private final int servings;
    private final int calories;
    private final int fat;
    private final int sodium;
    private final int carbohydrate;

    public static class Builder {
        //필수 매개변수
        private final int servingSize;
        private final int servings;
        //선택 매개변수 - 기본값으로 초기화
        private int calories = 0;
        private int fat = 0;
        private int sodium = 0;
        private int carbohydrate = 0;

        public Builder(int servingSize, int servings) {
            this.servingSize = servingSize;
            this.servings = servings;
        }

        public Builder calories(int val) {
            calories = val;
            return this;
        }

        public Builder fat(int val) {
            fat = val;
            return this;
        }
        
        public Builder sodium(int val) {
            sodium = val;
            return this;
        }
        
        public Builder carbohydrate(int val) {
            carbohydrate = val;
            return this;
        }
        
        public NutritionFacts build() {
            return new NutritionFacts(this);
        }
    }

    private NutritionFacts(Builder builder) {
        servingSize = builder.servingSize;
        servings = builder.servings;
        calories = builder.calories;
        fat = builder.fat;
        sodium = builder.sodium;
        carbohydrate = builder.carbohydrate;
    }
}
</code>

## 빌더 패턴의 활용
* 빌더패턴은 계층적으로 설계된 클래스와 함께 쓰기 좋다.
* 추상클래스는 추상빌더를, 구체 클래스는 구체 빌더를 갖게한다.

## 빌더 패턴의 단점
* 생성비용이 크진 않지만 성능에 민감한 상황에서는 문제가 될 수 있다.
* 점층적 생성자 보다 장황해서 매개변수가 4개는 되어야 값어치를 한다.
* 다만 api는 시간이 지날수록 매개변수가 많아지는 경향이 있다.

## 결론
* 생성자나 정적 팩토리로 시작했다가 나중에 매개변수가 많아지면 빌더패턴으로 변경하는 경우가 있다.
* 차라리 빌더패턴으로 시작한다면 더 나은 선택이 될 수 있다.
